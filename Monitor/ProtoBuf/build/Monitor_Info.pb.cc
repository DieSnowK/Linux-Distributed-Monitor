// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Monitor_Info.proto
// Protobuf C++ Version: 5.27.2

#include "Monitor_Info.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace monitor {

inline constexpr MonitorInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sort_irq_{},
        cpu_stat_{},
        net_info_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cpu_load_{nullptr},
        mem_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MonitorInfo::MonitorInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MonitorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonitorInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonitorInfoDefaultTypeInternal() {}
  union {
    MonitorInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonitorInfoDefaultTypeInternal _MonitorInfo_default_instance_;
}  // namespace monitor
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Monitor_5fInfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Monitor_5fInfo_2eproto = nullptr;
const ::uint32_t
    TableStruct_Monitor_5fInfo_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::monitor::MonitorInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::monitor::MonitorInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::monitor::MonitorInfo, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::monitor::MonitorInfo, _impl_.sort_irq_),
        PROTOBUF_FIELD_OFFSET(::monitor::MonitorInfo, _impl_.cpu_load_),
        PROTOBUF_FIELD_OFFSET(::monitor::MonitorInfo, _impl_.cpu_stat_),
        PROTOBUF_FIELD_OFFSET(::monitor::MonitorInfo, _impl_.mem_info_),
        PROTOBUF_FIELD_OFFSET(::monitor::MonitorInfo, _impl_.net_info_),
        ~0u,
        ~0u,
        0,
        ~0u,
        1,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::monitor::MonitorInfo)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::monitor::_MonitorInfo_default_instance_._instance,
};
const char descriptor_table_protodef_Monitor_5fInfo_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\022Monitor_Info.proto\022\007monitor\032\033google/pr"
    "otobuf/empty.proto\032\016Net_Info.proto\032\016Mem_"
    "Info.proto\032\016Cpu_Stat.proto\032\021Cpu_Softirq."
    "proto\032\016Cpu_Load.proto\"\317\001\n\013MonitorInfo\022\014\n"
    "\004name\030\001 \001(\t\022\"\n\010sort_irq\030\002 \003(\0132\020.monitor."
    "SoftIrq\022\"\n\010cpu_load\030\003 \001(\0132\020.monitor.CpuL"
    "oad\022\"\n\010cpu_stat\030\004 \003(\0132\020.monitor.CpuStat\022"
    "\"\n\010mem_info\030\005 \001(\0132\020.monitor.MemInfo\022\"\n\010n"
    "et_info\030\006 \003(\0132\020.monitor.NetInfo2\221\001\n\013Grpc"
    "Manager\022@\n\016SetMonitorInfo\022\024.monitor.Moni"
    "torInfo\032\026.google.protobuf.Empty\"\000\022@\n\016Get"
    "MonitorInfo\022\026.google.protobuf.Empty\032\024.mo"
    "nitor.MonitorInfo\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_Monitor_5fInfo_2eproto_deps[6] =
    {
        &::descriptor_table_Cpu_5fLoad_2eproto,
        &::descriptor_table_Cpu_5fSoftirq_2eproto,
        &::descriptor_table_Cpu_5fStat_2eproto,
        &::descriptor_table_Mem_5fInfo_2eproto,
        &::descriptor_table_Net_5fInfo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_Monitor_5fInfo_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_Monitor_5fInfo_2eproto = {
    false,
    false,
    507,
    descriptor_table_protodef_Monitor_5fInfo_2eproto,
    "Monitor_Info.proto",
    &descriptor_table_Monitor_5fInfo_2eproto_once,
    descriptor_table_Monitor_5fInfo_2eproto_deps,
    6,
    1,
    schemas,
    file_default_instances,
    TableStruct_Monitor_5fInfo_2eproto::offsets,
    file_level_enum_descriptors_Monitor_5fInfo_2eproto,
    file_level_service_descriptors_Monitor_5fInfo_2eproto,
};
namespace monitor {
// ===================================================================

class MonitorInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MonitorInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_._has_bits_);
};

void MonitorInfo::clear_sort_irq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sort_irq_.Clear();
}
void MonitorInfo::clear_cpu_load() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cpu_load_ != nullptr) _impl_.cpu_load_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MonitorInfo::clear_cpu_stat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_stat_.Clear();
}
void MonitorInfo::clear_mem_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mem_info_ != nullptr) _impl_.mem_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MonitorInfo::clear_net_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_info_.Clear();
}
MonitorInfo::MonitorInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.MonitorInfo)
}
inline PROTOBUF_NDEBUG_INLINE MonitorInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::monitor::MonitorInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sort_irq_{visibility, arena, from.sort_irq_},
        cpu_stat_{visibility, arena, from.cpu_stat_},
        net_info_{visibility, arena, from.net_info_},
        name_(arena, from.name_) {}

MonitorInfo::MonitorInfo(
    ::google::protobuf::Arena* arena,
    const MonitorInfo& from)
    : ::google::protobuf::Message(arena) {
  MonitorInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cpu_load_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::monitor::CpuLoad>(
                              arena, *from._impl_.cpu_load_)
                        : nullptr;
  _impl_.mem_info_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::monitor::MemInfo>(
                              arena, *from._impl_.mem_info_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:monitor.MonitorInfo)
}
inline PROTOBUF_NDEBUG_INLINE MonitorInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        sort_irq_{visibility, arena},
        cpu_stat_{visibility, arena},
        net_info_{visibility, arena},
        name_(arena) {}

inline void MonitorInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cpu_load_),
           0,
           offsetof(Impl_, mem_info_) -
               offsetof(Impl_, cpu_load_) +
               sizeof(Impl_::mem_info_));
}
MonitorInfo::~MonitorInfo() {
  // @@protoc_insertion_point(destructor:monitor.MonitorInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MonitorInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.cpu_load_;
  delete _impl_.mem_info_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
MonitorInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_._cached_size_),
              false,
          },
          &MonitorInfo::MergeImpl,
          &MonitorInfo::kDescriptorMethods,
          &descriptor_table_Monitor_5fInfo_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 5, 32, 2> MonitorInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MonitorInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::monitor::MonitorInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.name_)}},
    // repeated .monitor.SoftIrq sort_irq = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.sort_irq_)}},
    // .monitor.CpuLoad cpu_load = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_load_)}},
    // repeated .monitor.CpuStat cpu_stat = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_stat_)}},
    // .monitor.MemInfo mem_info = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 3, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.mem_info_)}},
    // repeated .monitor.NetInfo net_info = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 4, PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.net_info_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .monitor.SoftIrq sort_irq = 2;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.sort_irq_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .monitor.CpuLoad cpu_load = 3;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_load_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .monitor.CpuStat cpu_stat = 4;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_stat_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .monitor.MemInfo mem_info = 5;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.mem_info_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .monitor.NetInfo net_info = 6;
    {PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.net_info_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::monitor::SoftIrq>()},
    {::_pbi::TcParser::GetTable<::monitor::CpuLoad>()},
    {::_pbi::TcParser::GetTable<::monitor::CpuStat>()},
    {::_pbi::TcParser::GetTable<::monitor::MemInfo>()},
    {::_pbi::TcParser::GetTable<::monitor::NetInfo>()},
  }}, {{
    "\23\4\0\0\0\0\0\0"
    "monitor.MonitorInfo"
    "name"
  }},
};

PROTOBUF_NOINLINE void MonitorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.MonitorInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sort_irq_.Clear();
  _impl_.cpu_stat_.Clear();
  _impl_.net_info_.Clear();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.cpu_load_ != nullptr);
      _impl_.cpu_load_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mem_info_ != nullptr);
      _impl_.mem_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MonitorInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.MonitorInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "monitor.MonitorInfo.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .monitor.SoftIrq sort_irq = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_sort_irq_size());
       i < n; i++) {
    const auto& repfield = this->_internal_sort_irq().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .monitor.CpuLoad cpu_load = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.cpu_load_, _impl_.cpu_load_->GetCachedSize(), target, stream);
  }

  // repeated .monitor.CpuStat cpu_stat = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_cpu_stat_size());
       i < n; i++) {
    const auto& repfield = this->_internal_cpu_stat().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // .monitor.MemInfo mem_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.mem_info_, _impl_.mem_info_->GetCachedSize(), target, stream);
  }

  // repeated .monitor.NetInfo net_info = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_net_info_size());
       i < n; i++) {
    const auto& repfield = this->_internal_net_info().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.MonitorInfo)
  return target;
}

::size_t MonitorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.MonitorInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .monitor.SoftIrq sort_irq = 2;
  total_size += 1UL * this->_internal_sort_irq_size();
  for (const auto& msg : this->_internal_sort_irq()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .monitor.CpuStat cpu_stat = 4;
  total_size += 1UL * this->_internal_cpu_stat_size();
  for (const auto& msg : this->_internal_cpu_stat()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .monitor.NetInfo net_info = 6;
  total_size += 1UL * this->_internal_net_info_size();
  for (const auto& msg : this->_internal_net_info()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .monitor.CpuLoad cpu_load = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cpu_load_);
    }

    // .monitor.MemInfo mem_info = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mem_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void MonitorInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MonitorInfo*>(&to_msg);
  auto& from = static_cast<const MonitorInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:monitor.MonitorInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sort_irq()->MergeFrom(
      from._internal_sort_irq());
  _this->_internal_mutable_cpu_stat()->MergeFrom(
      from._internal_cpu_stat());
  _this->_internal_mutable_net_info()->MergeFrom(
      from._internal_net_info());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.cpu_load_ != nullptr);
      if (_this->_impl_.cpu_load_ == nullptr) {
        _this->_impl_.cpu_load_ =
            ::google::protobuf::Message::CopyConstruct<::monitor::CpuLoad>(arena, *from._impl_.cpu_load_);
      } else {
        _this->_impl_.cpu_load_->MergeFrom(*from._impl_.cpu_load_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.mem_info_ != nullptr);
      if (_this->_impl_.mem_info_ == nullptr) {
        _this->_impl_.mem_info_ =
            ::google::protobuf::Message::CopyConstruct<::monitor::MemInfo>(arena, *from._impl_.mem_info_);
      } else {
        _this->_impl_.mem_info_->MergeFrom(*from._impl_.mem_info_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MonitorInfo::CopyFrom(const MonitorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.MonitorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MonitorInfo::InternalSwap(MonitorInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sort_irq_.InternalSwap(&other->_impl_.sort_irq_);
  _impl_.cpu_stat_.InternalSwap(&other->_impl_.cpu_stat_);
  _impl_.net_info_.InternalSwap(&other->_impl_.net_info_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.mem_info_)
      + sizeof(MonitorInfo::_impl_.mem_info_)
      - PROTOBUF_FIELD_OFFSET(MonitorInfo, _impl_.cpu_load_)>(
          reinterpret_cast<char*>(&_impl_.cpu_load_),
          reinterpret_cast<char*>(&other->_impl_.cpu_load_));
}

::google::protobuf::Metadata MonitorInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_Monitor_5fInfo_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
