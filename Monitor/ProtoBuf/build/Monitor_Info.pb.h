// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Monitor_Info.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_Monitor_5fInfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Monitor_5fInfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "Net_Info.pb.h"
#include "Mem_Info.pb.h"
#include "Cpu_Stat.pb.h"
#include "Cpu_Softirq.pb.h"
#include "Cpu_Load.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Monitor_5fInfo_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Monitor_5fInfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Monitor_5fInfo_2eproto;
namespace monitor {
class MonitorInfo;
struct MonitorInfoDefaultTypeInternal;
extern MonitorInfoDefaultTypeInternal _MonitorInfo_default_instance_;
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace monitor {

// ===================================================================


// -------------------------------------------------------------------

class MonitorInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:monitor.MonitorInfo) */ {
 public:
  inline MonitorInfo() : MonitorInfo(nullptr) {}
  ~MonitorInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MonitorInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline MonitorInfo(const MonitorInfo& from) : MonitorInfo(nullptr, from) {}
  inline MonitorInfo(MonitorInfo&& from) noexcept
      : MonitorInfo(nullptr, std::move(from)) {}
  inline MonitorInfo& operator=(const MonitorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorInfo& operator=(MonitorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorInfo* internal_default_instance() {
    return reinterpret_cast<const MonitorInfo*>(
        &_MonitorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MonitorInfo& a, MonitorInfo& b) { a.Swap(&b); }
  inline void Swap(MonitorInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MonitorInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MonitorInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MonitorInfo& from) { MonitorInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MonitorInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "monitor.MonitorInfo"; }

 protected:
  explicit MonitorInfo(::google::protobuf::Arena* arena);
  MonitorInfo(::google::protobuf::Arena* arena, const MonitorInfo& from);
  MonitorInfo(::google::protobuf::Arena* arena, MonitorInfo&& from) noexcept
      : MonitorInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSortIrqFieldNumber = 2,
    kCpuStatFieldNumber = 4,
    kNetInfoFieldNumber = 6,
    kNameFieldNumber = 1,
    kCpuLoadFieldNumber = 3,
    kMemInfoFieldNumber = 5,
  };
  // repeated .monitor.SoftIrq sort_irq = 2;
  int sort_irq_size() const;
  private:
  int _internal_sort_irq_size() const;

  public:
  void clear_sort_irq() ;
  ::monitor::SoftIrq* mutable_sort_irq(int index);
  ::google::protobuf::RepeatedPtrField<::monitor::SoftIrq>* mutable_sort_irq();

  private:
  const ::google::protobuf::RepeatedPtrField<::monitor::SoftIrq>& _internal_sort_irq() const;
  ::google::protobuf::RepeatedPtrField<::monitor::SoftIrq>* _internal_mutable_sort_irq();
  public:
  const ::monitor::SoftIrq& sort_irq(int index) const;
  ::monitor::SoftIrq* add_sort_irq();
  const ::google::protobuf::RepeatedPtrField<::monitor::SoftIrq>& sort_irq() const;
  // repeated .monitor.CpuStat cpu_stat = 4;
  int cpu_stat_size() const;
  private:
  int _internal_cpu_stat_size() const;

  public:
  void clear_cpu_stat() ;
  ::monitor::CpuStat* mutable_cpu_stat(int index);
  ::google::protobuf::RepeatedPtrField<::monitor::CpuStat>* mutable_cpu_stat();

  private:
  const ::google::protobuf::RepeatedPtrField<::monitor::CpuStat>& _internal_cpu_stat() const;
  ::google::protobuf::RepeatedPtrField<::monitor::CpuStat>* _internal_mutable_cpu_stat();
  public:
  const ::monitor::CpuStat& cpu_stat(int index) const;
  ::monitor::CpuStat* add_cpu_stat();
  const ::google::protobuf::RepeatedPtrField<::monitor::CpuStat>& cpu_stat() const;
  // repeated .monitor.NetInfo net_info = 6;
  int net_info_size() const;
  private:
  int _internal_net_info_size() const;

  public:
  void clear_net_info() ;
  ::monitor::NetInfo* mutable_net_info(int index);
  ::google::protobuf::RepeatedPtrField<::monitor::NetInfo>* mutable_net_info();

  private:
  const ::google::protobuf::RepeatedPtrField<::monitor::NetInfo>& _internal_net_info() const;
  ::google::protobuf::RepeatedPtrField<::monitor::NetInfo>* _internal_mutable_net_info();
  public:
  const ::monitor::NetInfo& net_info(int index) const;
  ::monitor::NetInfo* add_net_info();
  const ::google::protobuf::RepeatedPtrField<::monitor::NetInfo>& net_info() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .monitor.CpuLoad cpu_load = 3;
  bool has_cpu_load() const;
  void clear_cpu_load() ;
  const ::monitor::CpuLoad& cpu_load() const;
  PROTOBUF_NODISCARD ::monitor::CpuLoad* release_cpu_load();
  ::monitor::CpuLoad* mutable_cpu_load();
  void set_allocated_cpu_load(::monitor::CpuLoad* value);
  void unsafe_arena_set_allocated_cpu_load(::monitor::CpuLoad* value);
  ::monitor::CpuLoad* unsafe_arena_release_cpu_load();

  private:
  const ::monitor::CpuLoad& _internal_cpu_load() const;
  ::monitor::CpuLoad* _internal_mutable_cpu_load();

  public:
  // .monitor.MemInfo mem_info = 5;
  bool has_mem_info() const;
  void clear_mem_info() ;
  const ::monitor::MemInfo& mem_info() const;
  PROTOBUF_NODISCARD ::monitor::MemInfo* release_mem_info();
  ::monitor::MemInfo* mutable_mem_info();
  void set_allocated_mem_info(::monitor::MemInfo* value);
  void unsafe_arena_set_allocated_mem_info(::monitor::MemInfo* value);
  ::monitor::MemInfo* unsafe_arena_release_mem_info();

  private:
  const ::monitor::MemInfo& _internal_mem_info() const;
  ::monitor::MemInfo* _internal_mutable_mem_info();

  public:
  // @@protoc_insertion_point(class_scope:monitor.MonitorInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 5,
      32, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MonitorInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MonitorInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::monitor::SoftIrq > sort_irq_;
    ::google::protobuf::RepeatedPtrField< ::monitor::CpuStat > cpu_stat_;
    ::google::protobuf::RepeatedPtrField< ::monitor::NetInfo > net_info_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::monitor::CpuLoad* cpu_load_;
    ::monitor::MemInfo* mem_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Monitor_5fInfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MonitorInfo

// string name = 1;
inline void MonitorInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MonitorInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitor.MonitorInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MonitorInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:monitor.MonitorInfo.name)
}
inline std::string* MonitorInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:monitor.MonitorInfo.name)
  return _s;
}
inline const std::string& MonitorInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void MonitorInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MonitorInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MonitorInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:monitor.MonitorInfo.name)
  return _impl_.name_.Release();
}
inline void MonitorInfo::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:monitor.MonitorInfo.name)
}

// repeated .monitor.SoftIrq sort_irq = 2;
inline int MonitorInfo::_internal_sort_irq_size() const {
  return _internal_sort_irq().size();
}
inline int MonitorInfo::sort_irq_size() const {
  return _internal_sort_irq_size();
}
inline ::monitor::SoftIrq* MonitorInfo::mutable_sort_irq(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:monitor.MonitorInfo.sort_irq)
  return _internal_mutable_sort_irq()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::monitor::SoftIrq>* MonitorInfo::mutable_sort_irq()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:monitor.MonitorInfo.sort_irq)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sort_irq();
}
inline const ::monitor::SoftIrq& MonitorInfo::sort_irq(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitor.MonitorInfo.sort_irq)
  return _internal_sort_irq().Get(index);
}
inline ::monitor::SoftIrq* MonitorInfo::add_sort_irq() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::monitor::SoftIrq* _add = _internal_mutable_sort_irq()->Add();
  // @@protoc_insertion_point(field_add:monitor.MonitorInfo.sort_irq)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::monitor::SoftIrq>& MonitorInfo::sort_irq() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:monitor.MonitorInfo.sort_irq)
  return _internal_sort_irq();
}
inline const ::google::protobuf::RepeatedPtrField<::monitor::SoftIrq>&
MonitorInfo::_internal_sort_irq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sort_irq_;
}
inline ::google::protobuf::RepeatedPtrField<::monitor::SoftIrq>*
MonitorInfo::_internal_mutable_sort_irq() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sort_irq_;
}

// .monitor.CpuLoad cpu_load = 3;
inline bool MonitorInfo::has_cpu_load() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cpu_load_ != nullptr);
  return value;
}
inline const ::monitor::CpuLoad& MonitorInfo::_internal_cpu_load() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::monitor::CpuLoad* p = _impl_.cpu_load_;
  return p != nullptr ? *p : reinterpret_cast<const ::monitor::CpuLoad&>(::monitor::_CpuLoad_default_instance_);
}
inline const ::monitor::CpuLoad& MonitorInfo::cpu_load() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitor.MonitorInfo.cpu_load)
  return _internal_cpu_load();
}
inline void MonitorInfo::unsafe_arena_set_allocated_cpu_load(::monitor::CpuLoad* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cpu_load_);
  }
  _impl_.cpu_load_ = reinterpret_cast<::monitor::CpuLoad*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:monitor.MonitorInfo.cpu_load)
}
inline ::monitor::CpuLoad* MonitorInfo::release_cpu_load() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::monitor::CpuLoad* released = _impl_.cpu_load_;
  _impl_.cpu_load_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::monitor::CpuLoad* MonitorInfo::unsafe_arena_release_cpu_load() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:monitor.MonitorInfo.cpu_load)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::monitor::CpuLoad* temp = _impl_.cpu_load_;
  _impl_.cpu_load_ = nullptr;
  return temp;
}
inline ::monitor::CpuLoad* MonitorInfo::_internal_mutable_cpu_load() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cpu_load_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::monitor::CpuLoad>(GetArena());
    _impl_.cpu_load_ = reinterpret_cast<::monitor::CpuLoad*>(p);
  }
  return _impl_.cpu_load_;
}
inline ::monitor::CpuLoad* MonitorInfo::mutable_cpu_load() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::monitor::CpuLoad* _msg = _internal_mutable_cpu_load();
  // @@protoc_insertion_point(field_mutable:monitor.MonitorInfo.cpu_load)
  return _msg;
}
inline void MonitorInfo::set_allocated_cpu_load(::monitor::CpuLoad* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cpu_load_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cpu_load_ = reinterpret_cast<::monitor::CpuLoad*>(value);
  // @@protoc_insertion_point(field_set_allocated:monitor.MonitorInfo.cpu_load)
}

// repeated .monitor.CpuStat cpu_stat = 4;
inline int MonitorInfo::_internal_cpu_stat_size() const {
  return _internal_cpu_stat().size();
}
inline int MonitorInfo::cpu_stat_size() const {
  return _internal_cpu_stat_size();
}
inline ::monitor::CpuStat* MonitorInfo::mutable_cpu_stat(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:monitor.MonitorInfo.cpu_stat)
  return _internal_mutable_cpu_stat()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::monitor::CpuStat>* MonitorInfo::mutable_cpu_stat()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:monitor.MonitorInfo.cpu_stat)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cpu_stat();
}
inline const ::monitor::CpuStat& MonitorInfo::cpu_stat(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitor.MonitorInfo.cpu_stat)
  return _internal_cpu_stat().Get(index);
}
inline ::monitor::CpuStat* MonitorInfo::add_cpu_stat() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::monitor::CpuStat* _add = _internal_mutable_cpu_stat()->Add();
  // @@protoc_insertion_point(field_add:monitor.MonitorInfo.cpu_stat)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::monitor::CpuStat>& MonitorInfo::cpu_stat() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:monitor.MonitorInfo.cpu_stat)
  return _internal_cpu_stat();
}
inline const ::google::protobuf::RepeatedPtrField<::monitor::CpuStat>&
MonitorInfo::_internal_cpu_stat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cpu_stat_;
}
inline ::google::protobuf::RepeatedPtrField<::monitor::CpuStat>*
MonitorInfo::_internal_mutable_cpu_stat() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cpu_stat_;
}

// .monitor.MemInfo mem_info = 5;
inline bool MonitorInfo::has_mem_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mem_info_ != nullptr);
  return value;
}
inline const ::monitor::MemInfo& MonitorInfo::_internal_mem_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::monitor::MemInfo* p = _impl_.mem_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::monitor::MemInfo&>(::monitor::_MemInfo_default_instance_);
}
inline const ::monitor::MemInfo& MonitorInfo::mem_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitor.MonitorInfo.mem_info)
  return _internal_mem_info();
}
inline void MonitorInfo::unsafe_arena_set_allocated_mem_info(::monitor::MemInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mem_info_);
  }
  _impl_.mem_info_ = reinterpret_cast<::monitor::MemInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:monitor.MonitorInfo.mem_info)
}
inline ::monitor::MemInfo* MonitorInfo::release_mem_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::monitor::MemInfo* released = _impl_.mem_info_;
  _impl_.mem_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::monitor::MemInfo* MonitorInfo::unsafe_arena_release_mem_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:monitor.MonitorInfo.mem_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::monitor::MemInfo* temp = _impl_.mem_info_;
  _impl_.mem_info_ = nullptr;
  return temp;
}
inline ::monitor::MemInfo* MonitorInfo::_internal_mutable_mem_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mem_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::monitor::MemInfo>(GetArena());
    _impl_.mem_info_ = reinterpret_cast<::monitor::MemInfo*>(p);
  }
  return _impl_.mem_info_;
}
inline ::monitor::MemInfo* MonitorInfo::mutable_mem_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::monitor::MemInfo* _msg = _internal_mutable_mem_info();
  // @@protoc_insertion_point(field_mutable:monitor.MonitorInfo.mem_info)
  return _msg;
}
inline void MonitorInfo::set_allocated_mem_info(::monitor::MemInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mem_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.mem_info_ = reinterpret_cast<::monitor::MemInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:monitor.MonitorInfo.mem_info)
}

// repeated .monitor.NetInfo net_info = 6;
inline int MonitorInfo::_internal_net_info_size() const {
  return _internal_net_info().size();
}
inline int MonitorInfo::net_info_size() const {
  return _internal_net_info_size();
}
inline ::monitor::NetInfo* MonitorInfo::mutable_net_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:monitor.MonitorInfo.net_info)
  return _internal_mutable_net_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::monitor::NetInfo>* MonitorInfo::mutable_net_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:monitor.MonitorInfo.net_info)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_net_info();
}
inline const ::monitor::NetInfo& MonitorInfo::net_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitor.MonitorInfo.net_info)
  return _internal_net_info().Get(index);
}
inline ::monitor::NetInfo* MonitorInfo::add_net_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::monitor::NetInfo* _add = _internal_mutable_net_info()->Add();
  // @@protoc_insertion_point(field_add:monitor.MonitorInfo.net_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::monitor::NetInfo>& MonitorInfo::net_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:monitor.MonitorInfo.net_info)
  return _internal_net_info();
}
inline const ::google::protobuf::RepeatedPtrField<::monitor::NetInfo>&
MonitorInfo::_internal_net_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.net_info_;
}
inline ::google::protobuf::RepeatedPtrField<::monitor::NetInfo>*
MonitorInfo::_internal_mutable_net_info() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.net_info_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace monitor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Monitor_5fInfo_2eproto_2epb_2eh
