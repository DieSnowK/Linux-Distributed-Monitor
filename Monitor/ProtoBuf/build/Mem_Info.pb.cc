// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Mem_Info.proto
// Protobuf C++ Version: 5.27.2

#include "Mem_Info.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace monitor {

inline constexpr MemInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : total_{0},
        free_{0},
        avail_{0},
        buffers_{0},
        cached_{0},
        swap_cached_{0},
        active_{0},
        inactive_{0},
        active_anon_{0},
        inactive_anon_{0},
        active_file_{0},
        inactive_file_{0},
        dirty_{0},
        writeback_{0},
        anon_pages_{0},
        mapped_{0},
        k_reclaimable_{0},
        s_reclaimable_{0},
        s_unreclaim_{0},
        used_percent_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MemInfo::MemInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemInfoDefaultTypeInternal() {}
  union {
    MemInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemInfoDefaultTypeInternal _MemInfo_default_instance_;
}  // namespace monitor
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Mem_5fInfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Mem_5fInfo_2eproto = nullptr;
const ::uint32_t
    TableStruct_Mem_5fInfo_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.total_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.free_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.avail_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.buffers_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.cached_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.swap_cached_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.active_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.inactive_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.active_anon_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.inactive_anon_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.active_file_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.inactive_file_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.dirty_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.writeback_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.anon_pages_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.mapped_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.k_reclaimable_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.s_reclaimable_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.s_unreclaim_),
        PROTOBUF_FIELD_OFFSET(::monitor::MemInfo, _impl_.used_percent_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::monitor::MemInfo)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::monitor::_MemInfo_default_instance_._instance,
};
const char descriptor_table_protodef_Mem_5fInfo_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016Mem_Info.proto\022\007monitor\"\204\003\n\007MemInfo\022\r\n"
    "\005total\030\001 \001(\002\022\014\n\004free\030\002 \001(\002\022\r\n\005avail\030\003 \001("
    "\002\022\017\n\007buffers\030\004 \001(\002\022\016\n\006cached\030\005 \001(\002\022\023\n\013sw"
    "ap_cached\030\006 \001(\002\022\016\n\006active\030\007 \001(\002\022\020\n\010inact"
    "ive\030\010 \001(\002\022\023\n\013active_anon\030\t \001(\002\022\025\n\rinacti"
    "ve_anon\030\n \001(\002\022\023\n\013active_file\030\013 \001(\002\022\025\n\rin"
    "active_file\030\014 \001(\002\022\r\n\005dirty\030\r \001(\002\022\021\n\twrit"
    "eback\030\016 \001(\002\022\022\n\nanon_pages\030\017 \001(\002\022\016\n\006mappe"
    "d\030\020 \001(\002\022\025\n\rk_reclaimable\030\021 \001(\002\022\025\n\rs_recl"
    "aimable\030\022 \001(\002\022\023\n\013s_unreclaim\030\023 \001(\002\022\024\n\014us"
    "ed_percent\030\024 \001(\002b\006proto3"
};
static ::absl::once_flag descriptor_table_Mem_5fInfo_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_Mem_5fInfo_2eproto = {
    false,
    false,
    424,
    descriptor_table_protodef_Mem_5fInfo_2eproto,
    "Mem_Info.proto",
    &descriptor_table_Mem_5fInfo_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_Mem_5fInfo_2eproto::offsets,
    file_level_enum_descriptors_Mem_5fInfo_2eproto,
    file_level_service_descriptors_Mem_5fInfo_2eproto,
};
namespace monitor {
// ===================================================================

class MemInfo::_Internal {
 public:
};

MemInfo::MemInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.MemInfo)
}
MemInfo::MemInfo(
    ::google::protobuf::Arena* arena, const MemInfo& from)
    : MemInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MemInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MemInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_),
           0,
           offsetof(Impl_, used_percent_) -
               offsetof(Impl_, total_) +
               sizeof(Impl_::used_percent_));
}
MemInfo::~MemInfo() {
  // @@protoc_insertion_point(destructor:monitor.MemInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MemInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
MemInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(MemInfo, _impl_._cached_size_),
              false,
          },
          &MemInfo::MergeImpl,
          &MemInfo::kDescriptorMethods,
          &descriptor_table_Mem_5fInfo_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 0, 0, 2> MemInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MemInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::monitor::MemInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float total = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.total_)}},
    // float free = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.free_)}},
    // float avail = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.avail_)}},
    // float buffers = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.buffers_)}},
    // float cached = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.cached_)}},
    // float swap_cached = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.swap_cached_)}},
    // float active = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_)}},
    // float inactive = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_)}},
    // float active_anon = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_anon_)}},
    // float inactive_anon = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_anon_)}},
    // float active_file = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_file_)}},
    // float inactive_file = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_file_)}},
    // float dirty = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.dirty_)}},
    // float writeback = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.writeback_)}},
    // float anon_pages = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.anon_pages_)}},
    // float mapped = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.mapped_)}},
    // float k_reclaimable = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.k_reclaimable_)}},
    // float s_reclaimable = 18;
    {::_pbi::TcParser::FastF32S2,
     {405, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.s_reclaimable_)}},
    // float s_unreclaim = 19;
    {::_pbi::TcParser::FastF32S2,
     {413, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.s_unreclaim_)}},
    // float used_percent = 20;
    {::_pbi::TcParser::FastF32S2,
     {421, 63, 0, PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.used_percent_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float total = 1;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.total_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float free = 2;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.free_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float avail = 3;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.avail_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float buffers = 4;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.buffers_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float cached = 5;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.cached_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float swap_cached = 6;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.swap_cached_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float active = 7;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float inactive = 8;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float active_anon = 9;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_anon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float inactive_anon = 10;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_anon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float active_file = 11;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.active_file_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float inactive_file = 12;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.inactive_file_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dirty = 13;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.dirty_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float writeback = 14;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.writeback_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float anon_pages = 15;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.anon_pages_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float mapped = 16;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.mapped_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float k_reclaimable = 17;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.k_reclaimable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float s_reclaimable = 18;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.s_reclaimable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float s_unreclaim = 19;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.s_unreclaim_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float used_percent = 20;
    {PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.used_percent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.MemInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.used_percent_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.used_percent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MemInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.MemInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float total = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = this->_internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_total(), target);
  }

  // float free = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_free = this->_internal_free();
  ::uint32_t raw_free;
  memcpy(&raw_free, &tmp_free, sizeof(tmp_free));
  if (raw_free != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_free(), target);
  }

  // float avail = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_avail = this->_internal_avail();
  ::uint32_t raw_avail;
  memcpy(&raw_avail, &tmp_avail, sizeof(tmp_avail));
  if (raw_avail != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_avail(), target);
  }

  // float buffers = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_buffers = this->_internal_buffers();
  ::uint32_t raw_buffers;
  memcpy(&raw_buffers, &tmp_buffers, sizeof(tmp_buffers));
  if (raw_buffers != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_buffers(), target);
  }

  // float cached = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cached = this->_internal_cached();
  ::uint32_t raw_cached;
  memcpy(&raw_cached, &tmp_cached, sizeof(tmp_cached));
  if (raw_cached != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_cached(), target);
  }

  // float swap_cached = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_swap_cached = this->_internal_swap_cached();
  ::uint32_t raw_swap_cached;
  memcpy(&raw_swap_cached, &tmp_swap_cached, sizeof(tmp_swap_cached));
  if (raw_swap_cached != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_swap_cached(), target);
  }

  // float active = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active = this->_internal_active();
  ::uint32_t raw_active;
  memcpy(&raw_active, &tmp_active, sizeof(tmp_active));
  if (raw_active != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_active(), target);
  }

  // float inactive = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive = this->_internal_inactive();
  ::uint32_t raw_inactive;
  memcpy(&raw_inactive, &tmp_inactive, sizeof(tmp_inactive));
  if (raw_inactive != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_inactive(), target);
  }

  // float active_anon = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_anon = this->_internal_active_anon();
  ::uint32_t raw_active_anon;
  memcpy(&raw_active_anon, &tmp_active_anon, sizeof(tmp_active_anon));
  if (raw_active_anon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_active_anon(), target);
  }

  // float inactive_anon = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_anon = this->_internal_inactive_anon();
  ::uint32_t raw_inactive_anon;
  memcpy(&raw_inactive_anon, &tmp_inactive_anon, sizeof(tmp_inactive_anon));
  if (raw_inactive_anon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_inactive_anon(), target);
  }

  // float active_file = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_file = this->_internal_active_file();
  ::uint32_t raw_active_file;
  memcpy(&raw_active_file, &tmp_active_file, sizeof(tmp_active_file));
  if (raw_active_file != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_active_file(), target);
  }

  // float inactive_file = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_file = this->_internal_inactive_file();
  ::uint32_t raw_inactive_file;
  memcpy(&raw_inactive_file, &tmp_inactive_file, sizeof(tmp_inactive_file));
  if (raw_inactive_file != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_inactive_file(), target);
  }

  // float dirty = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dirty = this->_internal_dirty();
  ::uint32_t raw_dirty;
  memcpy(&raw_dirty, &tmp_dirty, sizeof(tmp_dirty));
  if (raw_dirty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this->_internal_dirty(), target);
  }

  // float writeback = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_writeback = this->_internal_writeback();
  ::uint32_t raw_writeback;
  memcpy(&raw_writeback, &tmp_writeback, sizeof(tmp_writeback));
  if (raw_writeback != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this->_internal_writeback(), target);
  }

  // float anon_pages = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_anon_pages = this->_internal_anon_pages();
  ::uint32_t raw_anon_pages;
  memcpy(&raw_anon_pages, &tmp_anon_pages, sizeof(tmp_anon_pages));
  if (raw_anon_pages != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this->_internal_anon_pages(), target);
  }

  // float mapped = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mapped = this->_internal_mapped();
  ::uint32_t raw_mapped;
  memcpy(&raw_mapped, &tmp_mapped, sizeof(tmp_mapped));
  if (raw_mapped != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this->_internal_mapped(), target);
  }

  // float k_reclaimable = 17;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k_reclaimable = this->_internal_k_reclaimable();
  ::uint32_t raw_k_reclaimable;
  memcpy(&raw_k_reclaimable, &tmp_k_reclaimable, sizeof(tmp_k_reclaimable));
  if (raw_k_reclaimable != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        17, this->_internal_k_reclaimable(), target);
  }

  // float s_reclaimable = 18;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_s_reclaimable = this->_internal_s_reclaimable();
  ::uint32_t raw_s_reclaimable;
  memcpy(&raw_s_reclaimable, &tmp_s_reclaimable, sizeof(tmp_s_reclaimable));
  if (raw_s_reclaimable != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        18, this->_internal_s_reclaimable(), target);
  }

  // float s_unreclaim = 19;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_s_unreclaim = this->_internal_s_unreclaim();
  ::uint32_t raw_s_unreclaim;
  memcpy(&raw_s_unreclaim, &tmp_s_unreclaim, sizeof(tmp_s_unreclaim));
  if (raw_s_unreclaim != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        19, this->_internal_s_unreclaim(), target);
  }

  // float used_percent = 20;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_used_percent = this->_internal_used_percent();
  ::uint32_t raw_used_percent;
  memcpy(&raw_used_percent, &tmp_used_percent, sizeof(tmp_used_percent));
  if (raw_used_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        20, this->_internal_used_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.MemInfo)
  return target;
}

::size_t MemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.MemInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // float total = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = this->_internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    total_size += 5;
  }

  // float free = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_free = this->_internal_free();
  ::uint32_t raw_free;
  memcpy(&raw_free, &tmp_free, sizeof(tmp_free));
  if (raw_free != 0) {
    total_size += 5;
  }

  // float avail = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_avail = this->_internal_avail();
  ::uint32_t raw_avail;
  memcpy(&raw_avail, &tmp_avail, sizeof(tmp_avail));
  if (raw_avail != 0) {
    total_size += 5;
  }

  // float buffers = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_buffers = this->_internal_buffers();
  ::uint32_t raw_buffers;
  memcpy(&raw_buffers, &tmp_buffers, sizeof(tmp_buffers));
  if (raw_buffers != 0) {
    total_size += 5;
  }

  // float cached = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cached = this->_internal_cached();
  ::uint32_t raw_cached;
  memcpy(&raw_cached, &tmp_cached, sizeof(tmp_cached));
  if (raw_cached != 0) {
    total_size += 5;
  }

  // float swap_cached = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_swap_cached = this->_internal_swap_cached();
  ::uint32_t raw_swap_cached;
  memcpy(&raw_swap_cached, &tmp_swap_cached, sizeof(tmp_swap_cached));
  if (raw_swap_cached != 0) {
    total_size += 5;
  }

  // float active = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active = this->_internal_active();
  ::uint32_t raw_active;
  memcpy(&raw_active, &tmp_active, sizeof(tmp_active));
  if (raw_active != 0) {
    total_size += 5;
  }

  // float inactive = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive = this->_internal_inactive();
  ::uint32_t raw_inactive;
  memcpy(&raw_inactive, &tmp_inactive, sizeof(tmp_inactive));
  if (raw_inactive != 0) {
    total_size += 5;
  }

  // float active_anon = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_anon = this->_internal_active_anon();
  ::uint32_t raw_active_anon;
  memcpy(&raw_active_anon, &tmp_active_anon, sizeof(tmp_active_anon));
  if (raw_active_anon != 0) {
    total_size += 5;
  }

  // float inactive_anon = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_anon = this->_internal_inactive_anon();
  ::uint32_t raw_inactive_anon;
  memcpy(&raw_inactive_anon, &tmp_inactive_anon, sizeof(tmp_inactive_anon));
  if (raw_inactive_anon != 0) {
    total_size += 5;
  }

  // float active_file = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_file = this->_internal_active_file();
  ::uint32_t raw_active_file;
  memcpy(&raw_active_file, &tmp_active_file, sizeof(tmp_active_file));
  if (raw_active_file != 0) {
    total_size += 5;
  }

  // float inactive_file = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_file = this->_internal_inactive_file();
  ::uint32_t raw_inactive_file;
  memcpy(&raw_inactive_file, &tmp_inactive_file, sizeof(tmp_inactive_file));
  if (raw_inactive_file != 0) {
    total_size += 5;
  }

  // float dirty = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dirty = this->_internal_dirty();
  ::uint32_t raw_dirty;
  memcpy(&raw_dirty, &tmp_dirty, sizeof(tmp_dirty));
  if (raw_dirty != 0) {
    total_size += 5;
  }

  // float writeback = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_writeback = this->_internal_writeback();
  ::uint32_t raw_writeback;
  memcpy(&raw_writeback, &tmp_writeback, sizeof(tmp_writeback));
  if (raw_writeback != 0) {
    total_size += 5;
  }

  // float anon_pages = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_anon_pages = this->_internal_anon_pages();
  ::uint32_t raw_anon_pages;
  memcpy(&raw_anon_pages, &tmp_anon_pages, sizeof(tmp_anon_pages));
  if (raw_anon_pages != 0) {
    total_size += 5;
  }

  // float mapped = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mapped = this->_internal_mapped();
  ::uint32_t raw_mapped;
  memcpy(&raw_mapped, &tmp_mapped, sizeof(tmp_mapped));
  if (raw_mapped != 0) {
    total_size += 6;
  }

  // float k_reclaimable = 17;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k_reclaimable = this->_internal_k_reclaimable();
  ::uint32_t raw_k_reclaimable;
  memcpy(&raw_k_reclaimable, &tmp_k_reclaimable, sizeof(tmp_k_reclaimable));
  if (raw_k_reclaimable != 0) {
    total_size += 6;
  }

  // float s_reclaimable = 18;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_s_reclaimable = this->_internal_s_reclaimable();
  ::uint32_t raw_s_reclaimable;
  memcpy(&raw_s_reclaimable, &tmp_s_reclaimable, sizeof(tmp_s_reclaimable));
  if (raw_s_reclaimable != 0) {
    total_size += 6;
  }

  // float s_unreclaim = 19;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_s_unreclaim = this->_internal_s_unreclaim();
  ::uint32_t raw_s_unreclaim;
  memcpy(&raw_s_unreclaim, &tmp_s_unreclaim, sizeof(tmp_s_unreclaim));
  if (raw_s_unreclaim != 0) {
    total_size += 6;
  }

  // float used_percent = 20;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_used_percent = this->_internal_used_percent();
  ::uint32_t raw_used_percent;
  memcpy(&raw_used_percent, &tmp_used_percent, sizeof(tmp_used_percent));
  if (raw_used_percent != 0) {
    total_size += 6;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void MemInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemInfo*>(&to_msg);
  auto& from = static_cast<const MemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:monitor.MemInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_total = from._internal_total();
  ::uint32_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    _this->_impl_.total_ = from._impl_.total_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_free = from._internal_free();
  ::uint32_t raw_free;
  memcpy(&raw_free, &tmp_free, sizeof(tmp_free));
  if (raw_free != 0) {
    _this->_impl_.free_ = from._impl_.free_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_avail = from._internal_avail();
  ::uint32_t raw_avail;
  memcpy(&raw_avail, &tmp_avail, sizeof(tmp_avail));
  if (raw_avail != 0) {
    _this->_impl_.avail_ = from._impl_.avail_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_buffers = from._internal_buffers();
  ::uint32_t raw_buffers;
  memcpy(&raw_buffers, &tmp_buffers, sizeof(tmp_buffers));
  if (raw_buffers != 0) {
    _this->_impl_.buffers_ = from._impl_.buffers_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cached = from._internal_cached();
  ::uint32_t raw_cached;
  memcpy(&raw_cached, &tmp_cached, sizeof(tmp_cached));
  if (raw_cached != 0) {
    _this->_impl_.cached_ = from._impl_.cached_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_swap_cached = from._internal_swap_cached();
  ::uint32_t raw_swap_cached;
  memcpy(&raw_swap_cached, &tmp_swap_cached, sizeof(tmp_swap_cached));
  if (raw_swap_cached != 0) {
    _this->_impl_.swap_cached_ = from._impl_.swap_cached_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active = from._internal_active();
  ::uint32_t raw_active;
  memcpy(&raw_active, &tmp_active, sizeof(tmp_active));
  if (raw_active != 0) {
    _this->_impl_.active_ = from._impl_.active_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive = from._internal_inactive();
  ::uint32_t raw_inactive;
  memcpy(&raw_inactive, &tmp_inactive, sizeof(tmp_inactive));
  if (raw_inactive != 0) {
    _this->_impl_.inactive_ = from._impl_.inactive_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_anon = from._internal_active_anon();
  ::uint32_t raw_active_anon;
  memcpy(&raw_active_anon, &tmp_active_anon, sizeof(tmp_active_anon));
  if (raw_active_anon != 0) {
    _this->_impl_.active_anon_ = from._impl_.active_anon_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_anon = from._internal_inactive_anon();
  ::uint32_t raw_inactive_anon;
  memcpy(&raw_inactive_anon, &tmp_inactive_anon, sizeof(tmp_inactive_anon));
  if (raw_inactive_anon != 0) {
    _this->_impl_.inactive_anon_ = from._impl_.inactive_anon_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_active_file = from._internal_active_file();
  ::uint32_t raw_active_file;
  memcpy(&raw_active_file, &tmp_active_file, sizeof(tmp_active_file));
  if (raw_active_file != 0) {
    _this->_impl_.active_file_ = from._impl_.active_file_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_inactive_file = from._internal_inactive_file();
  ::uint32_t raw_inactive_file;
  memcpy(&raw_inactive_file, &tmp_inactive_file, sizeof(tmp_inactive_file));
  if (raw_inactive_file != 0) {
    _this->_impl_.inactive_file_ = from._impl_.inactive_file_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dirty = from._internal_dirty();
  ::uint32_t raw_dirty;
  memcpy(&raw_dirty, &tmp_dirty, sizeof(tmp_dirty));
  if (raw_dirty != 0) {
    _this->_impl_.dirty_ = from._impl_.dirty_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_writeback = from._internal_writeback();
  ::uint32_t raw_writeback;
  memcpy(&raw_writeback, &tmp_writeback, sizeof(tmp_writeback));
  if (raw_writeback != 0) {
    _this->_impl_.writeback_ = from._impl_.writeback_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_anon_pages = from._internal_anon_pages();
  ::uint32_t raw_anon_pages;
  memcpy(&raw_anon_pages, &tmp_anon_pages, sizeof(tmp_anon_pages));
  if (raw_anon_pages != 0) {
    _this->_impl_.anon_pages_ = from._impl_.anon_pages_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_mapped = from._internal_mapped();
  ::uint32_t raw_mapped;
  memcpy(&raw_mapped, &tmp_mapped, sizeof(tmp_mapped));
  if (raw_mapped != 0) {
    _this->_impl_.mapped_ = from._impl_.mapped_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k_reclaimable = from._internal_k_reclaimable();
  ::uint32_t raw_k_reclaimable;
  memcpy(&raw_k_reclaimable, &tmp_k_reclaimable, sizeof(tmp_k_reclaimable));
  if (raw_k_reclaimable != 0) {
    _this->_impl_.k_reclaimable_ = from._impl_.k_reclaimable_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_s_reclaimable = from._internal_s_reclaimable();
  ::uint32_t raw_s_reclaimable;
  memcpy(&raw_s_reclaimable, &tmp_s_reclaimable, sizeof(tmp_s_reclaimable));
  if (raw_s_reclaimable != 0) {
    _this->_impl_.s_reclaimable_ = from._impl_.s_reclaimable_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_s_unreclaim = from._internal_s_unreclaim();
  ::uint32_t raw_s_unreclaim;
  memcpy(&raw_s_unreclaim, &tmp_s_unreclaim, sizeof(tmp_s_unreclaim));
  if (raw_s_unreclaim != 0) {
    _this->_impl_.s_unreclaim_ = from._impl_.s_unreclaim_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_used_percent = from._internal_used_percent();
  ::uint32_t raw_used_percent;
  memcpy(&raw_used_percent, &tmp_used_percent, sizeof(tmp_used_percent));
  if (raw_used_percent != 0) {
    _this->_impl_.used_percent_ = from._impl_.used_percent_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemInfo::CopyFrom(const MemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.MemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemInfo::InternalSwap(MemInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.used_percent_)
      + sizeof(MemInfo::_impl_.used_percent_)
      - PROTOBUF_FIELD_OFFSET(MemInfo, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::google::protobuf::Metadata MemInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_Mem_5fInfo_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
