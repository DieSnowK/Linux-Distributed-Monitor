// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Cpu_Softirq.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_Cpu_5fSoftirq_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Cpu_5fSoftirq_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Cpu_5fSoftirq_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Cpu_5fSoftirq_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Cpu_5fSoftirq_2eproto;
namespace monitor {
class SoftIrq;
struct SoftIrqDefaultTypeInternal;
extern SoftIrqDefaultTypeInternal _SoftIrq_default_instance_;
}  // namespace monitor
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace monitor {

// ===================================================================


// -------------------------------------------------------------------

class SoftIrq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:monitor.SoftIrq) */ {
 public:
  inline SoftIrq() : SoftIrq(nullptr) {}
  ~SoftIrq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SoftIrq(
      ::google::protobuf::internal::ConstantInitialized);

  inline SoftIrq(const SoftIrq& from) : SoftIrq(nullptr, from) {}
  inline SoftIrq(SoftIrq&& from) noexcept
      : SoftIrq(nullptr, std::move(from)) {}
  inline SoftIrq& operator=(const SoftIrq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftIrq& operator=(SoftIrq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftIrq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftIrq* internal_default_instance() {
    return reinterpret_cast<const SoftIrq*>(
        &_SoftIrq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SoftIrq& a, SoftIrq& b) { a.Swap(&b); }
  inline void Swap(SoftIrq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftIrq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftIrq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SoftIrq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SoftIrq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SoftIrq& from) { SoftIrq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SoftIrq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "monitor.SoftIrq"; }

 protected:
  explicit SoftIrq(::google::protobuf::Arena* arena);
  SoftIrq(::google::protobuf::Arena* arena, const SoftIrq& from);
  SoftIrq(::google::protobuf::Arena* arena, SoftIrq&& from) noexcept
      : SoftIrq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCpuFieldNumber = 1,
    kHiFieldNumber = 2,
    kTimerFieldNumber = 3,
    kNetTxFieldNumber = 4,
    kNetRxFieldNumber = 5,
    kBlockFieldNumber = 6,
    kIrqPollFieldNumber = 7,
    kTaskletFieldNumber = 8,
    kSchedFieldNumber = 9,
    kHrtimerFieldNumber = 10,
    kRcuFieldNumber = 11,
  };
  // string cpu = 1;
  void clear_cpu() ;
  const std::string& cpu() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cpu(Arg_&& arg, Args_... args);
  std::string* mutable_cpu();
  PROTOBUF_NODISCARD std::string* release_cpu();
  void set_allocated_cpu(std::string* value);

  private:
  const std::string& _internal_cpu() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu(
      const std::string& value);
  std::string* _internal_mutable_cpu();

  public:
  // float hi = 2;
  void clear_hi() ;
  float hi() const;
  void set_hi(float value);

  private:
  float _internal_hi() const;
  void _internal_set_hi(float value);

  public:
  // float timer = 3;
  void clear_timer() ;
  float timer() const;
  void set_timer(float value);

  private:
  float _internal_timer() const;
  void _internal_set_timer(float value);

  public:
  // float net_tx = 4;
  void clear_net_tx() ;
  float net_tx() const;
  void set_net_tx(float value);

  private:
  float _internal_net_tx() const;
  void _internal_set_net_tx(float value);

  public:
  // float net_rx = 5;
  void clear_net_rx() ;
  float net_rx() const;
  void set_net_rx(float value);

  private:
  float _internal_net_rx() const;
  void _internal_set_net_rx(float value);

  public:
  // float block = 6;
  void clear_block() ;
  float block() const;
  void set_block(float value);

  private:
  float _internal_block() const;
  void _internal_set_block(float value);

  public:
  // float irq_poll = 7;
  void clear_irq_poll() ;
  float irq_poll() const;
  void set_irq_poll(float value);

  private:
  float _internal_irq_poll() const;
  void _internal_set_irq_poll(float value);

  public:
  // float tasklet = 8;
  void clear_tasklet() ;
  float tasklet() const;
  void set_tasklet(float value);

  private:
  float _internal_tasklet() const;
  void _internal_set_tasklet(float value);

  public:
  // float sched = 9;
  void clear_sched() ;
  float sched() const;
  void set_sched(float value);

  private:
  float _internal_sched() const;
  void _internal_set_sched(float value);

  public:
  // float hrtimer = 10;
  void clear_hrtimer() ;
  float hrtimer() const;
  void set_hrtimer(float value);

  private:
  float _internal_hrtimer() const;
  void _internal_set_hrtimer(float value);

  public:
  // float rcu = 11;
  void clear_rcu() ;
  float rcu() const;
  void set_rcu(float value);

  private:
  float _internal_rcu() const;
  void _internal_set_rcu(float value);

  public:
  // @@protoc_insertion_point(class_scope:monitor.SoftIrq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SoftIrq_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SoftIrq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr cpu_;
    float hi_;
    float timer_;
    float net_tx_;
    float net_rx_;
    float block_;
    float irq_poll_;
    float tasklet_;
    float sched_;
    float hrtimer_;
    float rcu_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Cpu_5fSoftirq_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SoftIrq

// string cpu = 1;
inline void SoftIrq::clear_cpu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_.ClearToEmpty();
}
inline const std::string& SoftIrq::cpu() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.cpu)
  return _internal_cpu();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoftIrq::set_cpu(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.cpu)
}
inline std::string* SoftIrq::mutable_cpu() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:monitor.SoftIrq.cpu)
  return _s;
}
inline const std::string& SoftIrq::_internal_cpu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cpu_.Get();
}
inline void SoftIrq::_internal_set_cpu(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_.Set(value, GetArena());
}
inline std::string* SoftIrq::_internal_mutable_cpu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cpu_.Mutable( GetArena());
}
inline std::string* SoftIrq::release_cpu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:monitor.SoftIrq.cpu)
  return _impl_.cpu_.Release();
}
inline void SoftIrq::set_allocated_cpu(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cpu_.IsDefault()) {
          _impl_.cpu_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:monitor.SoftIrq.cpu)
}

// float hi = 2;
inline void SoftIrq::clear_hi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hi_ = 0;
}
inline float SoftIrq::hi() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.hi)
  return _internal_hi();
}
inline void SoftIrq::set_hi(float value) {
  _internal_set_hi(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.hi)
}
inline float SoftIrq::_internal_hi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hi_;
}
inline void SoftIrq::_internal_set_hi(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hi_ = value;
}

// float timer = 3;
inline void SoftIrq::clear_timer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timer_ = 0;
}
inline float SoftIrq::timer() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.timer)
  return _internal_timer();
}
inline void SoftIrq::set_timer(float value) {
  _internal_set_timer(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.timer)
}
inline float SoftIrq::_internal_timer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timer_;
}
inline void SoftIrq::_internal_set_timer(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timer_ = value;
}

// float net_tx = 4;
inline void SoftIrq::clear_net_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_tx_ = 0;
}
inline float SoftIrq::net_tx() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.net_tx)
  return _internal_net_tx();
}
inline void SoftIrq::set_net_tx(float value) {
  _internal_set_net_tx(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.net_tx)
}
inline float SoftIrq::_internal_net_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.net_tx_;
}
inline void SoftIrq::_internal_set_net_tx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_tx_ = value;
}

// float net_rx = 5;
inline void SoftIrq::clear_net_rx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_rx_ = 0;
}
inline float SoftIrq::net_rx() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.net_rx)
  return _internal_net_rx();
}
inline void SoftIrq::set_net_rx(float value) {
  _internal_set_net_rx(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.net_rx)
}
inline float SoftIrq::_internal_net_rx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.net_rx_;
}
inline void SoftIrq::_internal_set_net_rx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.net_rx_ = value;
}

// float block = 6;
inline void SoftIrq::clear_block() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_ = 0;
}
inline float SoftIrq::block() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.block)
  return _internal_block();
}
inline void SoftIrq::set_block(float value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.block)
}
inline float SoftIrq::_internal_block() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_;
}
inline void SoftIrq::_internal_set_block(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_ = value;
}

// float irq_poll = 7;
inline void SoftIrq::clear_irq_poll() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.irq_poll_ = 0;
}
inline float SoftIrq::irq_poll() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.irq_poll)
  return _internal_irq_poll();
}
inline void SoftIrq::set_irq_poll(float value) {
  _internal_set_irq_poll(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.irq_poll)
}
inline float SoftIrq::_internal_irq_poll() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.irq_poll_;
}
inline void SoftIrq::_internal_set_irq_poll(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.irq_poll_ = value;
}

// float tasklet = 8;
inline void SoftIrq::clear_tasklet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tasklet_ = 0;
}
inline float SoftIrq::tasklet() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.tasklet)
  return _internal_tasklet();
}
inline void SoftIrq::set_tasklet(float value) {
  _internal_set_tasklet(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.tasklet)
}
inline float SoftIrq::_internal_tasklet() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tasklet_;
}
inline void SoftIrq::_internal_set_tasklet(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tasklet_ = value;
}

// float sched = 9;
inline void SoftIrq::clear_sched() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sched_ = 0;
}
inline float SoftIrq::sched() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.sched)
  return _internal_sched();
}
inline void SoftIrq::set_sched(float value) {
  _internal_set_sched(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.sched)
}
inline float SoftIrq::_internal_sched() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sched_;
}
inline void SoftIrq::_internal_set_sched(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sched_ = value;
}

// float hrtimer = 10;
inline void SoftIrq::clear_hrtimer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hrtimer_ = 0;
}
inline float SoftIrq::hrtimer() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.hrtimer)
  return _internal_hrtimer();
}
inline void SoftIrq::set_hrtimer(float value) {
  _internal_set_hrtimer(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.hrtimer)
}
inline float SoftIrq::_internal_hrtimer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hrtimer_;
}
inline void SoftIrq::_internal_set_hrtimer(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hrtimer_ = value;
}

// float rcu = 11;
inline void SoftIrq::clear_rcu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rcu_ = 0;
}
inline float SoftIrq::rcu() const {
  // @@protoc_insertion_point(field_get:monitor.SoftIrq.rcu)
  return _internal_rcu();
}
inline void SoftIrq::set_rcu(float value) {
  _internal_set_rcu(value);
  // @@protoc_insertion_point(field_set:monitor.SoftIrq.rcu)
}
inline float SoftIrq::_internal_rcu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rcu_;
}
inline void SoftIrq::_internal_set_rcu(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rcu_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace monitor


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Cpu_5fSoftirq_2eproto_2epb_2eh
